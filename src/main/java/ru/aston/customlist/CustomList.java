package ru.aston.customlist;

import java.util.Comparator;

public interface CustomList<E> extends Iterable<E> {
    /**
     * Метод добавления элемента
     *
     * @param e элемент
     * @return возвращает true если элемент добавлен в список
     */
    boolean add(E e);

    /**
     * Добавляет новый элемент по индексу в список. При достижении размера внутреннего
     * массива происходит его увеличение, если индекс больше массива выбрасывается исключение
     *
     * @param index   индекс для добавления элемента
     * @param element элемент
     */
    void add(int index, E element);

    /**
     * Метод для получения элемента по индексу
     *
     * @param index индекс объекта
     * @return Возвращает элемент списка по индексу
     */
    E get(int index);

    /**
     * Метод для удаления элемента по индексу.
     * existObjectForDelete проверяем наличие объекта в листе
     *
     * @param index индекс объекта
     */
    void delete(int index);

    /**
     * Метод для очистки коллекции
     */
    void clear();

    /**
     * Замена элемента по индексу
     *
     * @param index   индекс элемента в массиве
     * @param element элемент который должен быть установлен
     * @return возвращает элемент по индексу, если элемент не найден возвращается null
     */
    E set(int index, E element);

    /**
     * Метод определяет размер списка
     *
     * @return возвращает количество элементов в списке
     */
    int size();

    /**
     * Метод определяет если элементы в списке
     *
     * @return возвращает true если список пуст
     */
    boolean isEmpty();

    /**
     * Метод определяет если элементы в списке
     *
     * @return возвращает true если список не пуст
     */
    boolean isNotEmpty();

    /**
     * Проверка содержания объекта в списке
     *
     * @param o Object проверяемый объект
     * @return true, если объект содержится в списке, и false в противном случае
     */
    boolean contains(Object o);

    /**
     * Индекс в коллекции объекта
     *
     * @param o объект
     * @return возвращает индекс объекта
     */
    int indexOf(Object o);

    /**
     * Метод для перевода списка в массив объекта
     *
     * @return возвращает массив объектов
     */
    Object[] toArray();

    /**
     * Метод для сортировки списка. Алгоритм быстрая сортировка
     *
     * @param c реализация интерфейса Comparator для объекта из списка
     */
    void sort(Comparator<? super E> c);

    /**
     * Метод для преобразвания объектов в список объектов
     *
     * @param elements объекты
     * @return список объектов
     */
    CustomList<E> listOf(E... elements);
}
